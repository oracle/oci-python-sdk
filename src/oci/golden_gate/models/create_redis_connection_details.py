# coding: utf-8
# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200407

from .create_connection_details import CreateConnectionDetails
from oci.util import formatted_flat_dict, NONE_SENTINEL, value_allowed_none_or_none_sentinel  # noqa: F401
from oci.decorators import init_model_state_from_kwargs


@init_model_state_from_kwargs
class CreateRedisConnectionDetails(CreateConnectionDetails):
    """
    The information about a new Redis Connection.
    """

    def __init__(self, **kwargs):
        """
        Initializes a new CreateRedisConnectionDetails object with values from keyword arguments. The default value of the :py:attr:`~oci.golden_gate.models.CreateRedisConnectionDetails.connection_type` attribute
        of this class is ``REDIS`` and it should not be changed.
        The following keyword arguments are supported (corresponding to the getters/setters of this class):

        :param connection_type:
            The value to assign to the connection_type property of this CreateRedisConnectionDetails.
            Allowed values for this property are: "GOLDENGATE", "KAFKA", "KAFKA_SCHEMA_REGISTRY", "MYSQL", "JAVA_MESSAGE_SERVICE", "MICROSOFT_SQLSERVER", "OCI_OBJECT_STORAGE", "ORACLE", "AZURE_DATA_LAKE_STORAGE", "POSTGRESQL", "AZURE_SYNAPSE_ANALYTICS", "SNOWFLAKE", "AMAZON_S3", "HDFS", "ORACLE_NOSQL", "MONGODB", "AMAZON_KINESIS", "AMAZON_REDSHIFT", "REDIS", "ELASTICSEARCH", "GENERIC", "GOOGLE_CLOUD_STORAGE", "GOOGLE_BIGQUERY"
        :type connection_type: str

        :param display_name:
            The value to assign to the display_name property of this CreateRedisConnectionDetails.
        :type display_name: str

        :param description:
            The value to assign to the description property of this CreateRedisConnectionDetails.
        :type description: str

        :param compartment_id:
            The value to assign to the compartment_id property of this CreateRedisConnectionDetails.
        :type compartment_id: str

        :param freeform_tags:
            The value to assign to the freeform_tags property of this CreateRedisConnectionDetails.
        :type freeform_tags: dict(str, str)

        :param defined_tags:
            The value to assign to the defined_tags property of this CreateRedisConnectionDetails.
        :type defined_tags: dict(str, dict(str, object))

        :param vault_id:
            The value to assign to the vault_id property of this CreateRedisConnectionDetails.
        :type vault_id: str

        :param key_id:
            The value to assign to the key_id property of this CreateRedisConnectionDetails.
        :type key_id: str

        :param nsg_ids:
            The value to assign to the nsg_ids property of this CreateRedisConnectionDetails.
        :type nsg_ids: list[str]

        :param subnet_id:
            The value to assign to the subnet_id property of this CreateRedisConnectionDetails.
        :type subnet_id: str

        :param routing_method:
            The value to assign to the routing_method property of this CreateRedisConnectionDetails.
            Allowed values for this property are: "SHARED_SERVICE_ENDPOINT", "SHARED_DEPLOYMENT_ENDPOINT", "DEDICATED_ENDPOINT"
        :type routing_method: str

        :param technology_type:
            The value to assign to the technology_type property of this CreateRedisConnectionDetails.
        :type technology_type: str

        :param servers:
            The value to assign to the servers property of this CreateRedisConnectionDetails.
        :type servers: str

        :param security_protocol:
            The value to assign to the security_protocol property of this CreateRedisConnectionDetails.
        :type security_protocol: str

        :param authentication_type:
            The value to assign to the authentication_type property of this CreateRedisConnectionDetails.
        :type authentication_type: str

        :param username:
            The value to assign to the username property of this CreateRedisConnectionDetails.
        :type username: str

        :param password:
            The value to assign to the password property of this CreateRedisConnectionDetails.
        :type password: str

        :param trust_store:
            The value to assign to the trust_store property of this CreateRedisConnectionDetails.
        :type trust_store: str

        :param trust_store_password:
            The value to assign to the trust_store_password property of this CreateRedisConnectionDetails.
        :type trust_store_password: str

        :param key_store:
            The value to assign to the key_store property of this CreateRedisConnectionDetails.
        :type key_store: str

        :param key_store_password:
            The value to assign to the key_store_password property of this CreateRedisConnectionDetails.
        :type key_store_password: str

        """
        self.swagger_types = {
            'connection_type': 'str',
            'display_name': 'str',
            'description': 'str',
            'compartment_id': 'str',
            'freeform_tags': 'dict(str, str)',
            'defined_tags': 'dict(str, dict(str, object))',
            'vault_id': 'str',
            'key_id': 'str',
            'nsg_ids': 'list[str]',
            'subnet_id': 'str',
            'routing_method': 'str',
            'technology_type': 'str',
            'servers': 'str',
            'security_protocol': 'str',
            'authentication_type': 'str',
            'username': 'str',
            'password': 'str',
            'trust_store': 'str',
            'trust_store_password': 'str',
            'key_store': 'str',
            'key_store_password': 'str'
        }

        self.attribute_map = {
            'connection_type': 'connectionType',
            'display_name': 'displayName',
            'description': 'description',
            'compartment_id': 'compartmentId',
            'freeform_tags': 'freeformTags',
            'defined_tags': 'definedTags',
            'vault_id': 'vaultId',
            'key_id': 'keyId',
            'nsg_ids': 'nsgIds',
            'subnet_id': 'subnetId',
            'routing_method': 'routingMethod',
            'technology_type': 'technologyType',
            'servers': 'servers',
            'security_protocol': 'securityProtocol',
            'authentication_type': 'authenticationType',
            'username': 'username',
            'password': 'password',
            'trust_store': 'trustStore',
            'trust_store_password': 'trustStorePassword',
            'key_store': 'keyStore',
            'key_store_password': 'keyStorePassword'
        }

        self._connection_type = None
        self._display_name = None
        self._description = None
        self._compartment_id = None
        self._freeform_tags = None
        self._defined_tags = None
        self._vault_id = None
        self._key_id = None
        self._nsg_ids = None
        self._subnet_id = None
        self._routing_method = None
        self._technology_type = None
        self._servers = None
        self._security_protocol = None
        self._authentication_type = None
        self._username = None
        self._password = None
        self._trust_store = None
        self._trust_store_password = None
        self._key_store = None
        self._key_store_password = None
        self._connection_type = 'REDIS'

    @property
    def technology_type(self):
        """
        **[Required]** Gets the technology_type of this CreateRedisConnectionDetails.
        The Redis technology type.


        :return: The technology_type of this CreateRedisConnectionDetails.
        :rtype: str
        """
        return self._technology_type

    @technology_type.setter
    def technology_type(self, technology_type):
        """
        Sets the technology_type of this CreateRedisConnectionDetails.
        The Redis technology type.


        :param technology_type: The technology_type of this CreateRedisConnectionDetails.
        :type: str
        """
        self._technology_type = technology_type

    @property
    def servers(self):
        """
        **[Required]** Gets the servers of this CreateRedisConnectionDetails.
        Comma separated list of Redis server addresses, specified as host:port entries, where :port is optional.
        If port is not specified, it defaults to 6379.
        Used for establishing the initial connection to the Redis cluster.
        Example: `\"server1.example.com:6379,server2.example.com:6379\"`


        :return: The servers of this CreateRedisConnectionDetails.
        :rtype: str
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """
        Sets the servers of this CreateRedisConnectionDetails.
        Comma separated list of Redis server addresses, specified as host:port entries, where :port is optional.
        If port is not specified, it defaults to 6379.
        Used for establishing the initial connection to the Redis cluster.
        Example: `\"server1.example.com:6379,server2.example.com:6379\"`


        :param servers: The servers of this CreateRedisConnectionDetails.
        :type: str
        """
        self._servers = servers

    @property
    def security_protocol(self):
        """
        **[Required]** Gets the security_protocol of this CreateRedisConnectionDetails.
        Security protocol for Redis.


        :return: The security_protocol of this CreateRedisConnectionDetails.
        :rtype: str
        """
        return self._security_protocol

    @security_protocol.setter
    def security_protocol(self, security_protocol):
        """
        Sets the security_protocol of this CreateRedisConnectionDetails.
        Security protocol for Redis.


        :param security_protocol: The security_protocol of this CreateRedisConnectionDetails.
        :type: str
        """
        self._security_protocol = security_protocol

    @property
    def authentication_type(self):
        """
        **[Required]** Gets the authentication_type of this CreateRedisConnectionDetails.
        Authenticationentication type for the Redis database.


        :return: The authentication_type of this CreateRedisConnectionDetails.
        :rtype: str
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """
        Sets the authentication_type of this CreateRedisConnectionDetails.
        Authenticationentication type for the Redis database.


        :param authentication_type: The authentication_type of this CreateRedisConnectionDetails.
        :type: str
        """
        self._authentication_type = authentication_type

    @property
    def username(self):
        """
        Gets the username of this CreateRedisConnectionDetails.
        The username Oracle GoldenGate uses to connect the associated system of the given technology.
        This username must already exist and be available by the system/application to be connected to
        and must conform to the case sensitivty requirments defined in it.


        :return: The username of this CreateRedisConnectionDetails.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this CreateRedisConnectionDetails.
        The username Oracle GoldenGate uses to connect the associated system of the given technology.
        This username must already exist and be available by the system/application to be connected to
        and must conform to the case sensitivty requirments defined in it.


        :param username: The username of this CreateRedisConnectionDetails.
        :type: str
        """
        self._username = username

    @property
    def password(self):
        """
        Gets the password of this CreateRedisConnectionDetails.
        The password Oracle GoldenGate uses to connect the associated system of the given technology.
        It must conform to the specific security requirements including length, case sensitivity, and so on.


        :return: The password of this CreateRedisConnectionDetails.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this CreateRedisConnectionDetails.
        The password Oracle GoldenGate uses to connect the associated system of the given technology.
        It must conform to the specific security requirements including length, case sensitivity, and so on.


        :param password: The password of this CreateRedisConnectionDetails.
        :type: str
        """
        self._password = password

    @property
    def trust_store(self):
        """
        Gets the trust_store of this CreateRedisConnectionDetails.
        The base64 encoded content of the TrustStore file.


        :return: The trust_store of this CreateRedisConnectionDetails.
        :rtype: str
        """
        return self._trust_store

    @trust_store.setter
    def trust_store(self, trust_store):
        """
        Sets the trust_store of this CreateRedisConnectionDetails.
        The base64 encoded content of the TrustStore file.


        :param trust_store: The trust_store of this CreateRedisConnectionDetails.
        :type: str
        """
        self._trust_store = trust_store

    @property
    def trust_store_password(self):
        """
        Gets the trust_store_password of this CreateRedisConnectionDetails.
        The TrustStore password.


        :return: The trust_store_password of this CreateRedisConnectionDetails.
        :rtype: str
        """
        return self._trust_store_password

    @trust_store_password.setter
    def trust_store_password(self, trust_store_password):
        """
        Sets the trust_store_password of this CreateRedisConnectionDetails.
        The TrustStore password.


        :param trust_store_password: The trust_store_password of this CreateRedisConnectionDetails.
        :type: str
        """
        self._trust_store_password = trust_store_password

    @property
    def key_store(self):
        """
        Gets the key_store of this CreateRedisConnectionDetails.
        The base64 encoded content of the KeyStore file.


        :return: The key_store of this CreateRedisConnectionDetails.
        :rtype: str
        """
        return self._key_store

    @key_store.setter
    def key_store(self, key_store):
        """
        Sets the key_store of this CreateRedisConnectionDetails.
        The base64 encoded content of the KeyStore file.


        :param key_store: The key_store of this CreateRedisConnectionDetails.
        :type: str
        """
        self._key_store = key_store

    @property
    def key_store_password(self):
        """
        Gets the key_store_password of this CreateRedisConnectionDetails.
        The KeyStore password.


        :return: The key_store_password of this CreateRedisConnectionDetails.
        :rtype: str
        """
        return self._key_store_password

    @key_store_password.setter
    def key_store_password(self, key_store_password):
        """
        Sets the key_store_password of this CreateRedisConnectionDetails.
        The KeyStore password.


        :param key_store_password: The key_store_password of this CreateRedisConnectionDetails.
        :type: str
        """
        self._key_store_password = key_store_password

    def __repr__(self):
        return formatted_flat_dict(self)

    def __eq__(self, other):
        if other is None:
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not self == other
