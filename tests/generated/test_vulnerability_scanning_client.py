# Code generated. DO NOT EDIT.
# coding: utf-8
# Copyright (c) 2016, 2022, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

import pytest
from .. import test_config_container  # noqa: F401
from .. import util
import oci
import oci.exceptions as oci_exception
import os


def session_agnostic_query_matcher(r1, r2):
    r1_query = [x for x in r1.query if x[0] != 'sessionId']
    r2_query = [x for x in r2.query if x[0] != 'sessionId']
    return r1_query == r2_query


@pytest.fixture(autouse=True, scope='function')
def vcr_fixture(request):
    if test_config_container.test_mode == 'mock':
        yield
    else:
        # use the default matching logic (link below) with the exception of 'session_agnostic_query_matcher'
        # instead of 'query' matcher (which ignores sessionId in the url)
        # https://vcrpy.readthedocs.io/en/latest/configuration.html#request-matching
        custom_vcr = test_config_container.create_vcr()
        custom_vcr.register_matcher('session_agnostic_query_matcher', session_agnostic_query_matcher)

        cassette_location = os.path.join('generated', 'vulnerability_scanning_{name}.yml'.format(name=request.function.__name__))
        with custom_vcr.use_cassette(cassette_location, match_on=['method', 'scheme', 'host', 'port', 'path', 'session_agnostic_query_matcher']):
            yield


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_change_container_scan_recipe_compartment(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ChangeContainerScanRecipeCompartment'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ChangeContainerScanRecipeCompartment')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ChangeContainerScanRecipeCompartment')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.change_container_scan_recipe_compartment(
                container_scan_recipe_id=request.pop(util.camelize('containerScanRecipeId')),
                change_container_scan_recipe_compartment_details=request.pop(util.camelize('ChangeContainerScanRecipeCompartmentDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ChangeContainerScanRecipeCompartment',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'change_container_scan_recipe_compartment',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_change_container_scan_result_compartment(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ChangeContainerScanResultCompartment'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ChangeContainerScanResultCompartment')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ChangeContainerScanResultCompartment')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.change_container_scan_result_compartment(
                container_scan_result_id=request.pop(util.camelize('containerScanResultId')),
                change_container_scan_result_compartment_details=request.pop(util.camelize('ChangeContainerScanResultCompartmentDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ChangeContainerScanResultCompartment',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'change_container_scan_result_compartment',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_change_container_scan_target_compartment(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ChangeContainerScanTargetCompartment'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ChangeContainerScanTargetCompartment')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ChangeContainerScanTargetCompartment')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.change_container_scan_target_compartment(
                container_scan_target_id=request.pop(util.camelize('containerScanTargetId')),
                change_container_scan_target_compartment_details=request.pop(util.camelize('ChangeContainerScanTargetCompartmentDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ChangeContainerScanTargetCompartment',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'change_container_scan_target_compartment',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_change_host_agent_scan_result_compartment(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ChangeHostAgentScanResultCompartment'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ChangeHostAgentScanResultCompartment')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ChangeHostAgentScanResultCompartment')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.change_host_agent_scan_result_compartment(
                host_agent_scan_result_id=request.pop(util.camelize('hostAgentScanResultId')),
                change_host_agent_scan_result_compartment_details=request.pop(util.camelize('ChangeHostAgentScanResultCompartmentDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ChangeHostAgentScanResultCompartment',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'change_host_agent_scan_result_compartment',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_change_host_cis_benchmark_scan_result_compartment(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ChangeHostCisBenchmarkScanResultCompartment'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ChangeHostCisBenchmarkScanResultCompartment')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ChangeHostCisBenchmarkScanResultCompartment')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.change_host_cis_benchmark_scan_result_compartment(
                host_cis_benchmark_scan_result_id=request.pop(util.camelize('hostCisBenchmarkScanResultId')),
                change_host_cis_benchmark_scan_result_compartment_details=request.pop(util.camelize('ChangeHostCisBenchmarkScanResultCompartmentDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ChangeHostCisBenchmarkScanResultCompartment',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'change_host_cis_benchmark_scan_result_compartment',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_change_host_endpoint_protection_scan_result_compartment(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ChangeHostEndpointProtectionScanResultCompartment'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ChangeHostEndpointProtectionScanResultCompartment')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ChangeHostEndpointProtectionScanResultCompartment')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.change_host_endpoint_protection_scan_result_compartment(
                host_endpoint_protection_scan_result_id=request.pop(util.camelize('hostEndpointProtectionScanResultId')),
                change_host_endpoint_protection_scan_result_compartment_details=request.pop(util.camelize('ChangeHostEndpointProtectionScanResultCompartmentDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ChangeHostEndpointProtectionScanResultCompartment',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'change_host_endpoint_protection_scan_result_compartment',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_change_host_port_scan_result_compartment(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ChangeHostPortScanResultCompartment'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ChangeHostPortScanResultCompartment')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ChangeHostPortScanResultCompartment')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.change_host_port_scan_result_compartment(
                host_port_scan_result_id=request.pop(util.camelize('hostPortScanResultId')),
                change_host_port_scan_result_compartment_details=request.pop(util.camelize('ChangeHostPortScanResultCompartmentDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ChangeHostPortScanResultCompartment',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'change_host_port_scan_result_compartment',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_change_host_scan_recipe_compartment(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ChangeHostScanRecipeCompartment'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ChangeHostScanRecipeCompartment')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ChangeHostScanRecipeCompartment')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.change_host_scan_recipe_compartment(
                host_scan_recipe_id=request.pop(util.camelize('hostScanRecipeId')),
                change_host_scan_recipe_compartment_details=request.pop(util.camelize('ChangeHostScanRecipeCompartmentDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ChangeHostScanRecipeCompartment',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'change_host_scan_recipe_compartment',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_change_host_scan_target_compartment(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ChangeHostScanTargetCompartment'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ChangeHostScanTargetCompartment')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ChangeHostScanTargetCompartment')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.change_host_scan_target_compartment(
                host_scan_target_id=request.pop(util.camelize('hostScanTargetId')),
                change_host_scan_target_compartment_details=request.pop(util.camelize('ChangeHostScanTargetCompartmentDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ChangeHostScanTargetCompartment',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'change_host_scan_target_compartment',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_create_container_scan_recipe(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'CreateContainerScanRecipe'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'CreateContainerScanRecipe')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='CreateContainerScanRecipe')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.create_container_scan_recipe(
                create_container_scan_recipe_details=request.pop(util.camelize('CreateContainerScanRecipeDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'CreateContainerScanRecipe',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'containerScanRecipe',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_create_container_scan_target(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'CreateContainerScanTarget'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'CreateContainerScanTarget')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='CreateContainerScanTarget')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.create_container_scan_target(
                create_container_scan_target_details=request.pop(util.camelize('CreateContainerScanTargetDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'CreateContainerScanTarget',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'containerScanTarget',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_create_host_scan_recipe(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'CreateHostScanRecipe'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'CreateHostScanRecipe')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='CreateHostScanRecipe')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.create_host_scan_recipe(
                create_host_scan_recipe_details=request.pop(util.camelize('CreateHostScanRecipeDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'CreateHostScanRecipe',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostScanRecipe',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_create_host_scan_target(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'CreateHostScanTarget'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'CreateHostScanTarget')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='CreateHostScanTarget')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.create_host_scan_target(
                create_host_scan_target_details=request.pop(util.camelize('CreateHostScanTargetDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'CreateHostScanTarget',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostScanTarget',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_delete_container_scan_recipe(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'DeleteContainerScanRecipe'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'DeleteContainerScanRecipe')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='DeleteContainerScanRecipe')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.delete_container_scan_recipe(
                container_scan_recipe_id=request.pop(util.camelize('containerScanRecipeId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'DeleteContainerScanRecipe',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'delete_container_scan_recipe',
            True,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_delete_container_scan_result(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'DeleteContainerScanResult'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'DeleteContainerScanResult')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='DeleteContainerScanResult')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.delete_container_scan_result(
                container_scan_result_id=request.pop(util.camelize('containerScanResultId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'DeleteContainerScanResult',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'delete_container_scan_result',
            True,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_delete_container_scan_target(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'DeleteContainerScanTarget'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'DeleteContainerScanTarget')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='DeleteContainerScanTarget')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.delete_container_scan_target(
                container_scan_target_id=request.pop(util.camelize('containerScanTargetId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'DeleteContainerScanTarget',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'delete_container_scan_target',
            True,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_delete_host_agent_scan_result(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'DeleteHostAgentScanResult'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'DeleteHostAgentScanResult')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='DeleteHostAgentScanResult')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.delete_host_agent_scan_result(
                host_agent_scan_result_id=request.pop(util.camelize('hostAgentScanResultId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'DeleteHostAgentScanResult',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'delete_host_agent_scan_result',
            True,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_delete_host_cis_benchmark_scan_result(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'DeleteHostCisBenchmarkScanResult'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'DeleteHostCisBenchmarkScanResult')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='DeleteHostCisBenchmarkScanResult')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.delete_host_cis_benchmark_scan_result(
                host_cis_benchmark_scan_result_id=request.pop(util.camelize('hostCisBenchmarkScanResultId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'DeleteHostCisBenchmarkScanResult',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'delete_host_cis_benchmark_scan_result',
            True,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_delete_host_endpoint_protection_scan_result(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'DeleteHostEndpointProtectionScanResult'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'DeleteHostEndpointProtectionScanResult')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='DeleteHostEndpointProtectionScanResult')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.delete_host_endpoint_protection_scan_result(
                host_endpoint_protection_scan_result_id=request.pop(util.camelize('hostEndpointProtectionScanResultId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'DeleteHostEndpointProtectionScanResult',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'delete_host_endpoint_protection_scan_result',
            True,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_delete_host_port_scan_result(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'DeleteHostPortScanResult'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'DeleteHostPortScanResult')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='DeleteHostPortScanResult')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.delete_host_port_scan_result(
                host_port_scan_result_id=request.pop(util.camelize('hostPortScanResultId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'DeleteHostPortScanResult',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'delete_host_port_scan_result',
            True,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_delete_host_scan_recipe(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'DeleteHostScanRecipe'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'DeleteHostScanRecipe')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='DeleteHostScanRecipe')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.delete_host_scan_recipe(
                host_scan_recipe_id=request.pop(util.camelize('hostScanRecipeId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'DeleteHostScanRecipe',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'delete_host_scan_recipe',
            True,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_delete_host_scan_target(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'DeleteHostScanTarget'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'DeleteHostScanTarget')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='DeleteHostScanTarget')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.delete_host_scan_target(
                host_scan_target_id=request.pop(util.camelize('hostScanTargetId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'DeleteHostScanTarget',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'delete_host_scan_target',
            True,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_export_host_agent_scan_result_csv(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ExportHostAgentScanResultCsv'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ExportHostAgentScanResultCsv')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ExportHostAgentScanResultCsv')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.export_host_agent_scan_result_csv(
                export_host_agent_scan_result_csv_details=request.pop(util.camelize('ExportHostAgentScanResultCsvDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ExportHostAgentScanResultCsv',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'stream',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_export_host_vulnerability_csv(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ExportHostVulnerabilityCsv'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ExportHostVulnerabilityCsv')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ExportHostVulnerabilityCsv')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.export_host_vulnerability_csv(
                export_host_vulnerability_csv_details=request.pop(util.camelize('ExportHostVulnerabilityCsvDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ExportHostVulnerabilityCsv',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'stream',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_get_container_scan_recipe(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'GetContainerScanRecipe'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'GetContainerScanRecipe')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='GetContainerScanRecipe')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.get_container_scan_recipe(
                container_scan_recipe_id=request.pop(util.camelize('containerScanRecipeId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'GetContainerScanRecipe',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'containerScanRecipe',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_get_container_scan_result(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'GetContainerScanResult'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'GetContainerScanResult')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='GetContainerScanResult')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.get_container_scan_result(
                container_scan_result_id=request.pop(util.camelize('containerScanResultId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'GetContainerScanResult',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'containerScanResult',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_get_container_scan_target(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'GetContainerScanTarget'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'GetContainerScanTarget')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='GetContainerScanTarget')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.get_container_scan_target(
                container_scan_target_id=request.pop(util.camelize('containerScanTargetId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'GetContainerScanTarget',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'containerScanTarget',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_get_host_agent_scan_result(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'GetHostAgentScanResult'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'GetHostAgentScanResult')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='GetHostAgentScanResult')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.get_host_agent_scan_result(
                host_agent_scan_result_id=request.pop(util.camelize('hostAgentScanResultId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'GetHostAgentScanResult',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostAgentScanResult',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_get_host_cis_benchmark_scan_result(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'GetHostCisBenchmarkScanResult'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'GetHostCisBenchmarkScanResult')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='GetHostCisBenchmarkScanResult')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.get_host_cis_benchmark_scan_result(
                host_cis_benchmark_scan_result_id=request.pop(util.camelize('hostCisBenchmarkScanResultId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'GetHostCisBenchmarkScanResult',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostCisBenchmarkScanResult',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_get_host_endpoint_protection_scan_result(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'GetHostEndpointProtectionScanResult'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'GetHostEndpointProtectionScanResult')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='GetHostEndpointProtectionScanResult')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.get_host_endpoint_protection_scan_result(
                host_endpoint_protection_scan_result_id=request.pop(util.camelize('hostEndpointProtectionScanResultId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'GetHostEndpointProtectionScanResult',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostEndpointProtectionScanResult',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_get_host_port_scan_result(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'GetHostPortScanResult'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'GetHostPortScanResult')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='GetHostPortScanResult')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.get_host_port_scan_result(
                host_port_scan_result_id=request.pop(util.camelize('hostPortScanResultId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'GetHostPortScanResult',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostPortScanResult',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_get_host_scan_recipe(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'GetHostScanRecipe'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'GetHostScanRecipe')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='GetHostScanRecipe')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.get_host_scan_recipe(
                host_scan_recipe_id=request.pop(util.camelize('hostScanRecipeId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'GetHostScanRecipe',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostScanRecipe',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_get_host_scan_target(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'GetHostScanTarget'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'GetHostScanTarget')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='GetHostScanTarget')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.get_host_scan_target(
                host_scan_target_id=request.pop(util.camelize('hostScanTargetId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'GetHostScanTarget',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostScanTarget',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_get_host_vulnerability(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'GetHostVulnerability'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'GetHostVulnerability')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='GetHostVulnerability')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.get_host_vulnerability(
                host_vulnerability_id=request.pop(util.camelize('hostVulnerabilityId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'GetHostVulnerability',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostVulnerability',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_get_vulnerability(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'GetVulnerability'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'GetVulnerability')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='GetVulnerability')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.get_vulnerability(
                vulnerability_id=request.pop(util.camelize('vulnerabilityId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'GetVulnerability',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'vulnerability',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_get_work_request(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'GetWorkRequest'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'GetWorkRequest')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='GetWorkRequest')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.get_work_request(
                work_request_id=request.pop(util.camelize('workRequestId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'GetWorkRequest',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'workRequest',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_container_scan_recipes(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListContainerScanRecipes'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListContainerScanRecipes')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListContainerScanRecipes')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_container_scan_recipes(
                compartment_id=request.pop(util.camelize('compartmentId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_container_scan_recipes(
                    compartment_id=request.pop(util.camelize('compartmentId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_container_scan_recipes(
                        compartment_id=request.pop(util.camelize('compartmentId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListContainerScanRecipes',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'containerScanRecipeSummaryCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_container_scan_results(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListContainerScanResults'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListContainerScanResults')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListContainerScanResults')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_container_scan_results(
                compartment_id=request.pop(util.camelize('compartmentId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_container_scan_results(
                    compartment_id=request.pop(util.camelize('compartmentId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_container_scan_results(
                        compartment_id=request.pop(util.camelize('compartmentId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListContainerScanResults',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'containerScanResultSummaryCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_container_scan_targets(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListContainerScanTargets'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListContainerScanTargets')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListContainerScanTargets')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_container_scan_targets(
                compartment_id=request.pop(util.camelize('compartmentId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_container_scan_targets(
                    compartment_id=request.pop(util.camelize('compartmentId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_container_scan_targets(
                        compartment_id=request.pop(util.camelize('compartmentId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListContainerScanTargets',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'containerScanTargetSummaryCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_host_agent_scan_results(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListHostAgentScanResults'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListHostAgentScanResults')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListHostAgentScanResults')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_host_agent_scan_results(
                compartment_id=request.pop(util.camelize('compartmentId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_host_agent_scan_results(
                    compartment_id=request.pop(util.camelize('compartmentId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_host_agent_scan_results(
                        compartment_id=request.pop(util.camelize('compartmentId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListHostAgentScanResults',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostAgentScanResultSummaryCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_host_cis_benchmark_scan_results(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListHostCisBenchmarkScanResults'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListHostCisBenchmarkScanResults')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListHostCisBenchmarkScanResults')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_host_cis_benchmark_scan_results(
                compartment_id=request.pop(util.camelize('compartmentId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_host_cis_benchmark_scan_results(
                    compartment_id=request.pop(util.camelize('compartmentId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_host_cis_benchmark_scan_results(
                        compartment_id=request.pop(util.camelize('compartmentId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListHostCisBenchmarkScanResults',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostCisBenchmarkScanResultSummaryCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_host_endpoint_protection_scan_results(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListHostEndpointProtectionScanResults'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListHostEndpointProtectionScanResults')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListHostEndpointProtectionScanResults')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_host_endpoint_protection_scan_results(
                compartment_id=request.pop(util.camelize('compartmentId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_host_endpoint_protection_scan_results(
                    compartment_id=request.pop(util.camelize('compartmentId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_host_endpoint_protection_scan_results(
                        compartment_id=request.pop(util.camelize('compartmentId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListHostEndpointProtectionScanResults',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostEndpointProtectionScanResultSummaryCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_host_port_scan_results(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListHostPortScanResults'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListHostPortScanResults')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListHostPortScanResults')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_host_port_scan_results(
                compartment_id=request.pop(util.camelize('compartmentId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_host_port_scan_results(
                    compartment_id=request.pop(util.camelize('compartmentId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_host_port_scan_results(
                        compartment_id=request.pop(util.camelize('compartmentId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListHostPortScanResults',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostPortScanResultSummaryCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_host_scan_recipes(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListHostScanRecipes'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListHostScanRecipes')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListHostScanRecipes')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_host_scan_recipes(
                compartment_id=request.pop(util.camelize('compartmentId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_host_scan_recipes(
                    compartment_id=request.pop(util.camelize('compartmentId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_host_scan_recipes(
                        compartment_id=request.pop(util.camelize('compartmentId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListHostScanRecipes',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostScanRecipeSummaryCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_host_scan_target_errors(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListHostScanTargetErrors'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListHostScanTargetErrors')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListHostScanTargetErrors')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_host_scan_target_errors(
                compartment_id=request.pop(util.camelize('compartmentId')),
                host_scan_target_id=request.pop(util.camelize('hostScanTargetId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_host_scan_target_errors(
                    compartment_id=request.pop(util.camelize('compartmentId')),
                    host_scan_target_id=request.pop(util.camelize('hostScanTargetId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_host_scan_target_errors(
                        compartment_id=request.pop(util.camelize('compartmentId')),
                        host_scan_target_id=request.pop(util.camelize('hostScanTargetId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListHostScanTargetErrors',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostScanTargetErrorSummaryCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_host_scan_targets(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListHostScanTargets'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListHostScanTargets')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListHostScanTargets')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_host_scan_targets(
                compartment_id=request.pop(util.camelize('compartmentId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_host_scan_targets(
                    compartment_id=request.pop(util.camelize('compartmentId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_host_scan_targets(
                        compartment_id=request.pop(util.camelize('compartmentId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListHostScanTargets',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostScanTargetSummaryCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_host_vulnerabilities(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListHostVulnerabilities'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListHostVulnerabilities')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListHostVulnerabilities')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_host_vulnerabilities(
                compartment_id=request.pop(util.camelize('compartmentId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_host_vulnerabilities(
                    compartment_id=request.pop(util.camelize('compartmentId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_host_vulnerabilities(
                        compartment_id=request.pop(util.camelize('compartmentId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListHostVulnerabilities',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostVulnerabilitySummaryCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_host_vulnerability_impacted_hosts(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListHostVulnerabilityImpactedHosts'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListHostVulnerabilityImpactedHosts')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListHostVulnerabilityImpactedHosts')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_host_vulnerability_impacted_hosts(
                host_vulnerability_id=request.pop(util.camelize('hostVulnerabilityId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_host_vulnerability_impacted_hosts(
                    host_vulnerability_id=request.pop(util.camelize('hostVulnerabilityId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_host_vulnerability_impacted_hosts(
                        host_vulnerability_id=request.pop(util.camelize('hostVulnerabilityId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListHostVulnerabilityImpactedHosts',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'hostVulnerabilityImpactedHostSummaryCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_vulnerabilities(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListVulnerabilities'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListVulnerabilities')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListVulnerabilities')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_vulnerabilities(
                compartment_id=request.pop(util.camelize('compartmentId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_vulnerabilities(
                    compartment_id=request.pop(util.camelize('compartmentId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_vulnerabilities(
                        compartment_id=request.pop(util.camelize('compartmentId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListVulnerabilities',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'vulnerabilitySummaryCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_vulnerability_impacted_containers(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListVulnerabilityImpactedContainers'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListVulnerabilityImpactedContainers')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListVulnerabilityImpactedContainers')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_vulnerability_impacted_containers(
                vulnerability_id=request.pop(util.camelize('vulnerabilityId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_vulnerability_impacted_containers(
                    vulnerability_id=request.pop(util.camelize('vulnerabilityId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_vulnerability_impacted_containers(
                        vulnerability_id=request.pop(util.camelize('vulnerabilityId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListVulnerabilityImpactedContainers',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'vulnerabilityImpactedContainerSummaryCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_vulnerability_impacted_hosts(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListVulnerabilityImpactedHosts'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListVulnerabilityImpactedHosts')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListVulnerabilityImpactedHosts')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_vulnerability_impacted_hosts(
                vulnerability_id=request.pop(util.camelize('vulnerabilityId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_vulnerability_impacted_hosts(
                    vulnerability_id=request.pop(util.camelize('vulnerabilityId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_vulnerability_impacted_hosts(
                        vulnerability_id=request.pop(util.camelize('vulnerabilityId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListVulnerabilityImpactedHosts',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'vulnerabilityImpactedHostSummaryCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_work_request_errors(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListWorkRequestErrors'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListWorkRequestErrors')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListWorkRequestErrors')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_work_request_errors(
                work_request_id=request.pop(util.camelize('workRequestId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_work_request_errors(
                    work_request_id=request.pop(util.camelize('workRequestId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_work_request_errors(
                        work_request_id=request.pop(util.camelize('workRequestId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListWorkRequestErrors',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'workRequestErrorCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_work_request_logs(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListWorkRequestLogs'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListWorkRequestLogs')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListWorkRequestLogs')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_work_request_logs(
                work_request_id=request.pop(util.camelize('workRequestId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_work_request_logs(
                    work_request_id=request.pop(util.camelize('workRequestId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_work_request_logs(
                        work_request_id=request.pop(util.camelize('workRequestId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListWorkRequestLogs',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'workRequestLogEntryCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_list_work_requests(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'ListWorkRequests'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'ListWorkRequests')
    )
    mock_mode = config['test_mode'] == 'mock' if 'test_mode' in config else False

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='ListWorkRequests')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.list_work_requests(
                compartment_id=request.pop(util.camelize('compartmentId')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
            if not mock_mode and response.has_next_page:
                next_page = response.headers['opc-next-page']
                request = request_containers[i]['request'].copy()
                next_response = client.list_work_requests(
                    compartment_id=request.pop(util.camelize('compartmentId')),
                    page=next_page,
                    retry_strategy=oci.retry.NoneRetryStrategy(),
                    **(util.camel_to_snake_keys(request))
                )
                result.append(next_response)

                prev_page = 'opc-prev-page'
                if prev_page in next_response.headers:
                    request = request_containers[i]['request'].copy()
                    prev_response = client.list_work_requests(
                        compartment_id=request.pop(util.camelize('compartmentId')),
                        page=next_response.headers[prev_page],
                        retry_strategy=oci.retry.NoneRetryStrategy(),
                        **(util.camel_to_snake_keys(request))
                    )
                    result.append(prev_response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'ListWorkRequests',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'workRequestCollection',
            False,
            True
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_update_container_scan_recipe(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'UpdateContainerScanRecipe'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'UpdateContainerScanRecipe')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='UpdateContainerScanRecipe')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.update_container_scan_recipe(
                container_scan_recipe_id=request.pop(util.camelize('containerScanRecipeId')),
                update_container_scan_recipe_details=request.pop(util.camelize('UpdateContainerScanRecipeDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'UpdateContainerScanRecipe',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'update_container_scan_recipe',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_update_container_scan_target(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'UpdateContainerScanTarget'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'UpdateContainerScanTarget')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='UpdateContainerScanTarget')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.update_container_scan_target(
                container_scan_target_id=request.pop(util.camelize('containerScanTargetId')),
                update_container_scan_target_details=request.pop(util.camelize('UpdateContainerScanTargetDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'UpdateContainerScanTarget',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'update_container_scan_target',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_update_host_scan_recipe(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'UpdateHostScanRecipe'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'UpdateHostScanRecipe')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='UpdateHostScanRecipe')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.update_host_scan_recipe(
                host_scan_recipe_id=request.pop(util.camelize('hostScanRecipeId')),
                update_host_scan_recipe_details=request.pop(util.camelize('UpdateHostScanRecipeDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'UpdateHostScanRecipe',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'update_host_scan_recipe',
            False,
            False
        )


# IssueRoutingInfo tag="default" email="team_oci_scanning_us_grp@oracle.com" jiraProject="VSS" opsJiraProject="VSS"
def test_update_host_scan_target(testing_service_client):
    if not testing_service_client.is_api_enabled('vulnerability_scanning', 'UpdateHostScanTarget'):
        pytest.skip('OCI Testing Service has not been configured for this operation yet.')

    config = util.test_config_to_python_config(
        testing_service_client.get_test_config('vulnerability_scanning', util.camelize('vulnerability_scanning'), 'UpdateHostScanTarget')
    )

    request_containers = testing_service_client.get_requests(service_name='vulnerability_scanning', api_name='UpdateHostScanTarget')

    for i in range(len(request_containers)):
        request = request_containers[i]['request'].copy()
        result = []
        service_error = None

        try:
            service_endpoint = config['endpoint'] if 'endpoint' in config else None
            client = oci.vulnerability_scanning.VulnerabilityScanningClient(config, service_endpoint=service_endpoint)
            response = client.update_host_scan_target(
                host_scan_target_id=request.pop(util.camelize('hostScanTargetId')),
                update_host_scan_target_details=request.pop(util.camelize('UpdateHostScanTargetDetails')),
                retry_strategy=oci.retry.NoneRetryStrategy(),
                **(util.camel_to_snake_keys(request))
            )
            result.append(response)
        except oci_exception.ServiceError as service_exception:
            service_error = service_exception

        testing_service_client.validate_result(
            'vulnerability_scanning',
            'UpdateHostScanTarget',
            request_containers[i]['containerId'],
            request_containers[i]['request'],
            result,
            service_error,
            'update_host_scan_target',
            False,
            False
        )
